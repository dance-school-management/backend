services:
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: docker/dev/Dockerfile
      target: final
    ports:
      - "8000:8000"
    volumes:
      - ./api-gateway:/usr/src/app
      - /usr/src/app/node_modules
    env_file:
      - ./api-gateway/.env.development
    networks:
      - microservices-network
  product-microservice:
    build:
      context: ./product-microservice
      dockerfile: docker/dev/Dockerfile
      target: final
    ports:
      - "8001:8001"
      - "50051:50051"
    env_file:
      - ./product-microservice/.env.development
    volumes:
      - ./product-microservice/:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      product_db:
        condition: service_healthy
    networks:
      - microservices-network
  auth-microservice:
    build:
      context: ./auth-microservice
      dockerfile: docker/dev/Dockerfile
      target: final
    ports:
      - "8002:8002"
    env_file:
      - ./auth-microservice/.env.development
    volumes:
      - ./auth-microservice/:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      auth_db:
        condition: service_healthy
    networks:
      - microservices-network
  enroll-microservice:
    build:
      context: ./enroll-microservice
      dockerfile: docker/dev/Dockerfile
      target: final
    ports:
      - "8003:8003"
      - "50053:50051"
    env_file:
      - ./enroll-microservice/.env.development
    volumes:
      - ./enroll-microservice/:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      enroll_db:
        condition: service_healthy
    networks:
      - microservices-network
  profile-microservice:
    build:
      context: ./profile-microservice
      dockerfile: docker/dev/Dockerfile
      target: final
    ports:
      - "8004:8004"
      - "50052:50051"
    env_file:
      - ./profile-microservice/.env.development
    volumes:
      - ./profile-microservice/:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      profile_db:
        condition: service_healthy
    networks:
      - microservices-network
  review-microservice:
    build:
      context: ./review-microservice
      dockerfile: docker/dev/Dockerfile
      target: final
    ports:
      - "8007:8007"
    env_file:
      - ./review-microservice/.env.development
    volumes:
      - ./review-microservice/:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      review_db:
        condition: service_healthy
    networks:
      - microservices-network
  product_db:
    image: postgres:latest
    restart: always
    user: postgres
    secrets:
      - product_db
    environment:
      POSTGRES_DB: products
      POSTGRES_PASSWORD_FILE: /run/secrets/product_db
    ports:
      - "5434:5432"
    volumes:
      - product_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    expose:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  enroll_db:
    image: postgres:latest
    restart: always
    user: postgres
    secrets:
      - enroll_db
    environment:
      POSTGRES_DB: enroll
      POSTGRES_PASSWORD_FILE: /run/secrets/enroll_db
    ports:
      - "5435:5432"
    volumes:
      - enroll_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    expose:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  auth_db:
    image: postgres:latest
    restart: always
    user: postgres
    secrets:
      - auth_db
    environment:
      POSTGRES_DB: auth
      POSTGRES_PASSWORD_FILE: /run/secrets/auth_db
    ports:
      - "5433:5432"
    volumes:
      - auth_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    expose:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  profile_db:
    image: postgres:latest
    restart: always
    user: postgres
    secrets:
      - profile_db
    environment:
      POSTGRES_DB: profiles
      POSTGRES_PASSWORD_FILE: /run/secrets/profile_db
    ports:
      - "5436:5432"
    volumes:
      - profile_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    expose:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  review_db:
    image: postgres:latest
    restart: always
    user: postgres
    secrets:
      - review_db
    environment:
      POSTGRES_DB: reviews
      POSTGRES_PASSWORD_FILE: /run/secrets/review_db
    ports:
      - "5439:5432"
    volumes:
      - review_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    expose:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5


volumes:
  product_data:
  auth_data:
  enroll_data:
  profile_data:
  review_data:
networks:
  microservices-network:
    driver: bridge
secrets:
  auth_db:
    file: db/auth-db-password.txt
  product_db:
    file: db/product-db-password.txt
  enroll_db:
    file: db/enroll-db-password.txt
  profile_db:
    file: db/profile-db-password.txt
  review_db:
    file: db/review-db-password.txt
